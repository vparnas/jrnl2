#!/usr/bin/env bash

# parent tag included for all time-tracking entries
TIME_TRACK_TAG="@time-track" 
# If non-blank, use this journal for all time-tracking, instead of the default
TIME_TRACK_JOURNAL=""
MAIN_JOURNAL="$HOME/journals/journal.txt"

# Default command-line options and such
COMMANDS=()
OPTIONS=()
declare -A ARGS=()

# If exists, reads the above configuration from the external config
[ -f ~/.jrnl_helpers.rc ] && . ~/.jrnl_helpers.rc

function log_topic
{
    (($# < 1)) && echo "Provide topic" && return
    (echo $1. && while read; do echo $REPLY; done) | jrnl
}

function jrnl_time_start
{
    $(jrnl $TIME_TRACK_JOURNAL $TIME_TRACK_TAG -n 1 --short | grep -q '@.*start') &&\
        echo "Time already running" && return
    if [[ $1 ]] ; then
        tag=$1
    else
        options=$(jrnl --tags $TIME_TRACK_JOURNAL $TIME_TRACK_TAG | grep -v $TIME_TRACK_TAG | awk '{print $1}')
        tag=$(echo -e "$options" | dmenu -i -p "Select or type a new task preceded with @")
    fi
    [ -z "$tag" ] && echo "Aborted" && return
    jrnl $TIME_TRACK_JOURNAL $TIME_TRACK_TAG $tag start
    msg="Tracking time for $TIME_TRACK_TAG $tag"
    echo "$msg"
    notify-send -t 5000 "$msg"
}

function jrnl_time_end
{
    output=$(jrnl $TIME_TRACK_JOURNAL $TIME_TRACK_TAG -n 1 --short | grep '@.*start')
    [ -z "$output" ] && echo "No time currently tracked" && return
    relevant_tags=$(jrnl --tags $TIME_TRACK_JOURNAL $TIME_TRACK_TAG -n 1 | awk '{print $1}' | xargs echo)
    jrnl $TIME_TRACK_JOURNAL $relevant_tags end
    msg="End time for $relevant_tags"
    echo "$msg"
    notify-send -t 5000 "$msg"
}

function jrnl_report_time
{
    (($# < 1)) && echo -e "Can pass additional *conjunctive* jrnl parameters. Ex: \"-to/-from DATE\", or specific tag.\n"
    output=$(jrnl --tags -and $TIME_TRACK_JOURNAL $* $TIME_TRACK_TAG)
    grep -q 'No tags found' <<< $output && \
        echo "No relevant time-tracking tags found" && return
    awk '{print $1}' <<< $output |\
    while read -r tag ; do
        printf '%20s: ' "$tag";
        jrnl -and $TIME_TRACK_JOURNAL $* $TIME_TRACK_TAG $tag --short |\
        dategrep '>2018-01-01' -o |\
        while read -r start_time && read -r end_time ; do 
            datediff -f "%Hh%Mm" "$start_time" "$end_time" 
        done |\
        xargs dateadd '2018-01-00 00:00' -f "%dd %Hh %Mm"
    done
}

# Imports file into jrnl with the respective last-modification date
function jrnl_entry_import 
{
    (($# < 1)) && echo "Provide a filename to import" && return
    (date -r $1 '+%Y-%m-%d %H:%M: ' && cat "$1") | jrnl

}

function jrnl_entry_search
{
    pattern=$1
    [[ "${OPTIONS[*]}" =~ short ]] && instr='P' || instr='p'
    # TODO: handle last line of file
    sed -nr "/^[0-9]{4}-[0-9]{2}-[0-9]{2}/{x;/$pattern/$instr;d}; {H;d}" "$MAIN_JOURNAL"
}

# Adds entry in preference of
# 1. stdin
# 2. argument
# 3. Edited in $EDITOR
function jrnl_entry_add
{
    filter='1s/\.\s\+/.\n/'
    read -rt .01 input
    if [[ "$input" ]] ; then
        entry=$(sed "$filter" <<< $input)
    elif [[ -n $1 ]]; then
        entry=$(sed "$filter" <<< "${@:1}")
    else
        # TODO: how to wait for $EDITOR to truly exit?
        # TODO: disregard empty file
        # TODO: Return status upon entry termination
        tmpfile=$(mktemp --tmpdir jrnl-edit.XXXXXX)
        trap 'rm "$tmpfile"' 0 1 15
        $EDITOR $tmpfile
        entry=$(sed "$filter" $tmpfile)
        #rm $tmpfile
    fi
    echo -e "\n$(date '+%Y-%m-%d %H:%M') $entry" >> "$MAIN_JOURNAL"
}

#
## The stdout isn't immediately visible with each selected <ctrl>+<enter> tag as the entire output is piped to echo
#alias jrnl_select_tags="jrnl --tags | awk '{print \$1}' | dmenu | xargs echo"
#
#alias jrnl_today_edit="jrnl -on today --edit"
#alias jrnl_list_todos="jrnl @todo --short"
#alias jrnl_list_daily="jrnl -and @daily @todo"

function usage {
  cat <<EOF  
Need to provide a command or alias.
        -h|--help: help text,
        -n|--max entries <n>: limit query to the last n entries,
        -s|--search <pattern>: search for records containing <pattern>,
        -t|--tags: view list of tags
        --short: view entry headings only
EOF
}

function parseargs() {
    while [[ -n $1 ]]; do
        arg_needed=0
        case $1 in
            # Switches and configuration
            -t|--tags) COMMANDS+=('tags');;
            --short) OPTIONS+=('short');;
            -s|--search) 
                arg_needed=1
                cmd="search"
                ;;
            -n|--max_entries) 
                arg_needed=1
                cmd="max_entries"
                ;;
            -h|--help|-*) COMMANDS+=('help');;
            *) return;; 
        esac
        shift
        if [[ $arg_needed == 1 ]]; then
            [[ $# -lt 1 || $1 =~ ^\- ]] && echo "$cmd needs an argument" && exit 128
            COMMANDS+=("$cmd")
            ARGS["$cmd"]="$1"
            shift
        fi
    done
}

parseargs "$@"

[[ ${#COMMANDS} == 0 ]] && jrnl_entry_add "$@" && exit 0

case ${COMMANDS[0]} in
    search) jrnl_entry_search  "${ARGS['search']}";;
    tags) grep -o '@\w\+' $MAIN_JOURNAL | sort | uniq -ci | sort -nr;;
    help) usage;;
esac
