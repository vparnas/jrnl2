#!/bin/bash
# (c) 2019-2020 Vitaly Parnas <vp330@parnas.me>
# See LICENSE for licensing information.

# parent tag included for all time-tracking entries
TIME_TRACK_TAG="@time-track" 
TIME_TRACK_JOURNAL="default"
RECORD_START_PAT="[0-9]{4}-[0-9]{2}-[0-9]{2}\s[0-9]{2}:[0-9]{2}"
CFG_FILE="$HOME/.jrnl2.rc"

# If exists, reads the above configuration from the external config
[[ -f "$CFG_FILE" ]] && . "$CFG_FILE"

function jrnl_time_start
{
    $(jrnl -j $TIME_TRACK_JOURNAL -s $TIME_TRACK_TAG -n 1 --short | 
        grep -q '@.*start') && echo "Time already running" && return
    if [[ $1 ]] ; then
        tag=$1
    else
        options=$(jrnl -j $TIME_TRACK_JOURNAL -s $TIME_TRACK_TAG --tags | grep -v $TIME_TRACK_TAG | awk '{print $2}')
        if which dmenu; then
            menu_prog="dmenu"
        elif which slmenu; then
            menu_prog="slmenu"
        else
            echo "dmenu or slmenu not found. Must manually pass in tag."
            return
        fi
        tag=$(echo -e "$options" | $menu_prog -i -p "Select or type a new task preceded with @")
    fi
    [ -z "$tag" ] && echo "Aborted" && return
    jrnl -j $TIME_TRACK_JOURNAL $TIME_TRACK_TAG $tag start
    msg="Tracking time for $TIME_TRACK_TAG $tag"
    echo "$msg"
    which notify-send && notify-send -t 5000 "$msg"
}

function jrnl_time_end
{
    output=$(jrnl -j $TIME_TRACK_JOURNAL -s $TIME_TRACK_TAG -n 1 --short | grep '@.*start')
    [ -z "$output" ] && echo "No time currently tracked" && return
    relevant_tags=$(jrnl -j $TIME_TRACK_JOURNAL -s $TIME_TRACK_TAG -n 1 --tags | awk '{print $2}' | xargs echo)
    jrnl -j $TIME_TRACK_JOURNAL $relevant_tags end
    msg="End time for $relevant_tags"
    echo "$msg"
    which notify-send && notify-send -t 5000 "$msg"
}

function jrnl_time_report
{
    (($# < 1)) && echo -e "Can pass additional *conjunctive* search terms or restrictive options to jrnl in quotes.\n"
    search_params=""
    for s in "$@"; do 
        search_params+=" $s"
    done
    output=$(jrnl -j $TIME_TRACK_JOURNAL -s $TIME_TRACK_TAG $search_params --tags)
    [ -z "$output" ] && echo "No relevant time-tracking tags found" && return
    while read -r _ tag ; do
        printf '%20s: ' "$tag"
        tstamps=$(
            jrnl -j $TIME_TRACK_JOURNAL $search_params -s $TIME_TRACK_TAG \
                -s $tag --short | 
            egrep "^$RECORD_START_PAT" -o
        )
        total_s=0
        while read -r start_time && read -r end_time ; do 
            d1=$(date -d "$start_time" "+%s")
            d2=$(date -d "$end_time" "+%s")
            (( total_s+=($d2 - $d1) ))
        done <<< "$tstamps"
        period_d=$(( 60*60*24 ))
        period_h=3600
        period_m=60
        days=$(( $total_s / $period_d )) 
        hours=$(( ($total_s % $period_d) / $period_h  ))
        minutes=$(( ($total_s % $period_h) / $period_m  ))
        printf '%dd %dh %dm\n' "$days" "$hours" "$minutes"
    done <<< "$output"
}

function help {
  cat <<EOF  
${0##*/}:
    -h: help text,
    -s: start timetracking a task
    -e: end timetracking
    -r: report on all timetracking
EOF
}

[ -z "$1" ] && help && exit 1

getopts "serh" o && 
    case "${o}" in
        s) shift; jrnl_time_start "$@" ;;
        e) jrnl_time_end ;;
        r) shift; jrnl_time_report "$@" ;;
        h|*) help ;;
    esac 
exit 0
